generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// User table - stores base profile and credentials
model User {
    id              String   @id @default(uuid())
    email           String?  @unique
    phone           String?  @unique
    name            String?
    passwordHash    String? // null for OAuth users
    isEmailVerified Boolean  @default(false)
    isPhoneVerified Boolean  @default(false)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    // Relations
    accounts           Account[]
    sessions           Session[]
    verificationTokens VerificationToken[]
    passwordResetToken PasswordResetToken[]
    otpRequests        OtpRequest[]

    @@index([email])
    @@index([phone])
}

// Session table - stores refresh tokens (or sessions)
model Session {
    id               String   @id @default(uuid())
    userId           String
    user             User     @relation(fields: [userId], references: [id])
    refreshTokenHash String   @unique
    expiresAt        DateTime
    createdAt        DateTime @default(now())
    revoked          Boolean  @default(false)
}

// VerificationToken table - used for verifying new accounts or email changes
model VerificationToken {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    tokenHash String   @unique
    type      String // e.g. "EMAIL_VERIFICATION", "PHONE_VERIFICATION"
    expiresAt DateTime
    createdAt DateTime @default(now())
    consumed  Boolean  @default(false)
}

// PasswordResetToken table - for password reset links or OTP-based reset flows
model PasswordResetToken {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    tokenHash String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())
    used      Boolean  @default(false)
}

// OtpRequest table - for OTP via email or phone
model OtpRequest {
    id        String   @id @default(uuid())
    userId    String?
    user      User?    @relation(fields: [userId], references: [id])
    target    String // email or phone number
    codeHash  String // hashed OTP for security
    purpose   String // "LOGIN", "REGISTER", "RESET_PASSWORD"
    expiresAt DateTime
    verified  Boolean  @default(false)
    createdAt DateTime @default(now())
}

// Account table - for OAuth account (e.g. Google, GitHub, etc.)
model Account {
    id                String    @id @default(uuid())
    userId            String
    User              User      @relation(fields: [userId], references: [id])
    provider          String // "google", "github", etc.
    providerAccountId String // unique ID from provider
    accessToken       String?
    refreshToken      String?
    expiresAt         DateTime?
    idToken           String?

    @@unique([provider, providerAccountId])
}
